/**
 * Script de configuration automatique de la base de donn√©es Supabase
 * Ex√©cute la cr√©ation des tables n√©cessaires pour SoloFlow
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Fonction pour charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  try {
    const envPath = path.join(__dirname, '.env.local');
    const envContent = fs.readFileSync(envPath, 'utf8');
    
    envContent.split('\n').forEach(line => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#') && trimmed.includes('=')) {
        const [key, ...valueParts] = trimmed.split('=');
        const value = valueParts.join('=');
        process.env[key] = value;
      }
    });
    
    console.log('‚úÖ Variables d\'environnement charg√©es depuis .env.local');
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement de .env.local:', error.message);
  }
}

// Charger les variables d'environnement
loadEnvFile();

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('üîç Variables Supabase d√©tect√©es:');
console.log('   - URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
console.log('   - Key:', supabaseServiceKey ? '‚úÖ' : '‚ùå');

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createTablesDirectly() {
  console.log('üöÄ Cr√©ation directe des tables SoloFlow...');
  
  const tables = {
    users: `
      CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR(255) UNIQUE NOT NULL,
        full_name VARCHAR(255),
        avatar_url VARCHAR(255),
        subscription_plan VARCHAR(50) DEFAULT 'free',
        subscription_expires_at TIMESTAMPTZ,
        is_admin BOOLEAN DEFAULT FALSE,
        clerk_user_id VARCHAR(255) UNIQUE,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `,
    content_generations: `
      CREATE TABLE IF NOT EXISTS content_generations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        original_image_url VARCHAR(255) NOT NULL,
        extracted_text TEXT,
        user_comment TEXT,
        generated_content JSONB NOT NULL,
        status VARCHAR(50) DEFAULT 'completed',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `,
    social_posts: `
      CREATE TABLE IF NOT EXISTS social_posts (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        content_generation_id UUID REFERENCES content_generations(id) ON DELETE CASCADE,
        platform VARCHAR(50) NOT NULL,
        status VARCHAR(50) NOT NULL,
        platform_post_id VARCHAR(255),
        error_message TEXT,
        published_at TIMESTAMPTZ,
        created_at TIMESTAMPTZ DEFAULT NOW()
      );
    `
  };
  
  try {
    // Cr√©er chaque table
    for (const [tableName, sql] of Object.entries(tables)) {
      console.log(`üìù Cr√©ation de la table ${tableName}...`);
      
      const { error } = await supabase.rpc('exec_sql', { sql });
      
      if (error) {
        console.log(`   ‚ö†Ô∏è  RPC √©chou√©, tentative directe...`);
        // Fallback: essayer avec une requ√™te SQL brute
        try {
          const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${supabaseServiceKey}`,
              'apikey': supabaseServiceKey
            },
            body: JSON.stringify({ sql })
          });
          
          if (response.ok) {
            console.log(`   ‚úÖ Table ${tableName} cr√©√©e`);
          } else {
            console.log(`   ‚ö†Ô∏è  Erreur HTTP ${response.status} pour ${tableName}`);
          }
        } catch (fetchError) {
          console.log(`   ‚ö†Ô∏è  Erreur fetch pour ${tableName}:`, fetchError.message);
        }
      } else {
        console.log(`   ‚úÖ Table ${tableName} cr√©√©e`);
      }
    }
    
    // V√©rifier que les tables existent
    console.log('\nüîç V√©rification des tables...');
    
    for (const tableName of Object.keys(tables)) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`   ‚ùå ${tableName}: ${error.message}`);
        } else {
          console.log(`   ‚úÖ ${tableName}: Table accessible`);
        }
      } catch (err) {
        console.log(`   ‚ùå ${tableName}: Erreur de v√©rification`);
      }
    }
    
    console.log('\nüéâ Configuration termin√©e!');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. V√©rifiez les tables dans l\'interface Supabase');
    console.log('   2. Testez la connexion utilisateur');
    console.log('   3. Configurez les redirections Clerk');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des tables:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter le script
createTablesDirectly();